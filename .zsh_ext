# Env variable to check if git is available
command -v git >/dev/null 2>&1
GIT_AVAILABLE=$?

# Get current status of git repo
function parse_git_dirty {
  if [ $GIT_AVAILABLE -eq 0 ]; then
    STATUS="$(git status 2> /dev/null)"
    if [[ $? -ne 0 ]]; then printf "-"; return; else printf "["; fi
    if echo ${STATUS} | grep -c "renamed:"         &> /dev/null; then printf ">"; else printf ""; fi
    if echo ${STATUS} | grep -c "branch is ahead:" &> /dev/null; then printf "!"; else printf ""; fi
    if echo ${STATUS} | grep -c "new file::"       &> /dev/null; then printf "+"; else printf ""; fi
    if echo ${STATUS} | grep -c "Untracked files:" &> /dev/null; then printf "?"; else printf ""; fi
    if echo ${STATUS} | grep -c "modified:"        &> /dev/null; then printf "*"; else printf ""; fi
    if echo ${STATUS} | grep -c "deleted:"         &> /dev/null; then printf "-"; else printf ""; fi
    printf "]"
  else
    "" 2> /dev/null
  fi
}

parse_git_branch() {
  # Long form
  if [ $GIT_AVAILABLE -eq 0 ]; then
    git rev-parse --abbrev-ref HEAD 2> /dev/null
  else
    "" 2> /dev/null
  fi
}

parse_conda_environment() {
  if [[ $(echo $CONDA_DEFAULT_ENV) ]]; then
      echo "($CONDA_DEFAULT_ENV) " 
  else
      echo ""
  fi
}

# Setting the title of the terminal
settitle () {
  echo -ne '\033]0;'"$1"'\a'
}

autoload -Uz vcs_info
precmd() { vcs_info }

zstyle ':vcs_info:git:*' formats '%b '
setopt PROMPT_SUBST
PROMPT='%F{011}%(?.⦿.⊗)%f %F{122}%~%f %F{005}${vcs_info_msg_0_}%f$ '
